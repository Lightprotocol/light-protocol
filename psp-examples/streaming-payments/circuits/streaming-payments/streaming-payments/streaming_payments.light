pragma circom 2.1.4;

include "poseidon.circom";
include "merkleProof.circom";
include "keypair.circom";
include "gates.circom";
include "comparators.circom";
include "transaction.circom";

// will create a new instance of the circuit
#[instance]
{
    name: streaming_payments,
    publicInputs: [currentSlot],
}


/**
* Generates environment components: isAppInUtxoInEscrowUtxo[4], instructionHasherEscrowInUtxo
*
*/

utxoType streamUtxo {
    endSlot,
    rate,
}

inUtxo streamInUtxo {
    type: streamUtxo,
}

outUtxo remaingStreamUtxo {
    type: streamUtxo,
    enabled: remainingAmount,
    checks: {
        amountSol == remainingAmount,
        dataHash == streamInUtxo.dataHash,
        owner == publicProgramId,
    },
    dataChecks: {
        endSlot == streamInUtxo.endSlot,
        rate == streamInUtxo.rate,
    },
}

#[entrypoint]
template streaming_payments() {
    /**
    * -------------------------- Application starts here --------------------------
    */
    // defines the data which is saved in the utxo
    // this data is defined at utxo creation
    // is checked that only utxos with instructionData = hash or 0
    // exist in input utxos
    // is outside instruction
    // could add signal inputs automatically for these
    // are private inputs
    signal input currentSlotPrivate;
    signal input currentSlot;
    signal input diff;
    signal input remainingAmount;

    utxo streamInUtxo;

    // check that diff is a 64bit value to prevent an overflow during additon
    component rangeCheckDiff = Num2Bits(64);
    rangeCheckDiff.in <== diff;
    // check that currentSlotPrivate is a 64bit value to prevent an overflow during additon
    component rangeCheckSlotPrivate = Num2Bits(64);
    rangeCheckSlotPrivate.in <== currentSlotPrivate;

    // check that currentSlot is the sum of currentSlotPrivate + diff
    // there is no need for a range check of currentSlot since it is checked
    // onchain in the solana program to be <= the actual current slot during execution
    currentSlotPrivate + diff === currentSlot;

    // calculate remaining amount of the payment stream
    (streamInUtxo.endSlot - currentSlotPrivate) * streamInUtxo.rate === remainingAmount;

    // check that streamInUtxo.endSlot - currentSlotPrivate >= 0
    component greaterThanZero = GreaterEqThan(64);
    greaterThanZero.in[0] <== streamInUtxo.endSlot - currentSlotPrivate;
    greaterThanZero.in[1] <== 0;
    greaterThanZero.out === 1;

    // check that one out utxo conforms to the requirements of the correct
    // it is the same as the input utxo except the amount
    // - standardProgramUtxoPubkey
    // - remainingAmount as sol amount in index 0
    // - instructionHasher.out
    utxo remaingStreamUtxo;
    remaingStreamUtxo.check();
}

/*
* Environment Constants:
*   levels = 18
*   nIns = 4
*   nOuts = 4
*   feeAsset = TruncatedKeccak256(0)
*   indexFeeAsset = 0
*   indexPublicAsset = 1
*   nAssets = 3
*   nInAssets = 2
*   nOutAssets = 2
* Environment variables:
*   txIntegrityHash;
*   transactionVersion;
*   publicAppVerifier;
*   transactionHash;
*   instructionHasher.out;
*  InUtxos:
*   inAmount[nIns][nInAssets];
*   inPublicKey[nIns];
*   inBlinding[nIns];
*   inAppDataHash[nIns];
*   inPoolType[nIns];
*   inVerifierPubkey[nIns];
*   inIndices[nIns][nInAssets][nAssets];
* OutUtxos:
*   publicUtxoHash[nOuts];
*   outAmount[nOuts][nOutAssets];
*   outPubkey[nOuts];
*   outBlinding[nOuts];
*   outAppDataHash[nOuts];
*   outIndices[nOuts][nOutAssets][nAssets];
*   outPoolType[nOuts];
*   outVerifierPubkey[nOuts];
*/
