pragma circom 2.1.4;

include "poseidon.circom";
include "merkleProof.circom";
include "keypair.circom";
include "gates.circom";
include "comparators.circom";

// will create a new instance of the circuit
#[instance]
{
  name: rock_paper_scissors,
  publicInputs: [publicGameCommitment0, publicGameCommitment1],
}

utxoType gameUtxo {
  slot, // after this slot the game should timeout and player two should win by default not implemented yet
  choice,
  opponentGameCommitmentHash, // zero for player 1
  userPubkey,
}

inUtxo playerOne {
  type: gameUtxo,
  checks:
  {
    utxoDataHash == publicGameCommitment0,
  },
}

inUtxo playerTwo {
  type: gameUtxo,
  checks:
  {
    amountSol == playerOne.amountSol,
    amountSpl == playerOne.amountSpl,
    assetSpl == playerOne.assetSpl,
    utxoDataHash == publicGameCommitment1,
  },
  dataChecks: {
    opponentGameCommitmentHash == playerOne.opponentGameCommitmentHash,
  },
}

// TODO: enable expression in fields
outUtxo drawPlayerTwo {
  type: native,
  enabled: isDraw,
  checks:
  {
    amountSol == playerTwo.amountSol,
    amountSpl == playerTwo.amountSpl,
    assetSpl == playerTwo.assetSpl,
    blinding == playerTwoOutUtxoBlinding,
    publicKey == playerTwo.userPubkey,
  },
}

// Player one loses, since player one executes we need to check the utxo of player two
outUtxo winPlayerTwo {
  type: native,
  enabled: isLoss,
  checks:
  {
    amountSol == doubleAmountSol,
    amountSpl == doubleAmountSpl,
    assetSpl == playerTwo.assetSpl,
    blinding == playerTwoOutUtxoBlinding,
    publicKey == playerTwo.userPubkey,
  },
}

#[entrypoint]
template rock_paper_scissors() {

    signal input isDraw;
    signal input isWin[3]; // player 1 executes the transaction
    signal input isLoss;
    signal input publicGameCommitment0;
    signal input publicGameCommitment1;

    utxo playerOne;
    playerOne.check();
    utxo playerTwo;
    playerTwo.check();
    utxo drawPlayerTwo;
    utxo winPlayerTwo;

    var playerTwoOutUtxoBlinding = playerTwo.publicKey + playerTwo.publicKey;
    var doubleAmountSol = playerTwo.amountSol * 2;
    var doubleAmountSpl = playerTwo.amountSpl * 2;

    var isWinTmp = 0;
    for (var i = 0; i < 3; i++) {
      (isWin[i] - 1) * isWin[i] === 0;
      isWinTmp = isWinTmp + isWin[i];
    }

    component checkWin = ForceEqualIfEnabled();
    checkWin.in[0] <== isWinTmp;
    checkWin.in[1] <== 0;
    checkWin.enabled <== isLoss + isDraw;

    // either isLoss or isDraw should be 1
    component checkIsDrawOrLose1 = OR();
    checkIsDrawOrLose1.a <== isLoss;
    checkIsDrawOrLose1.b <== isDraw;
    checkIsDrawOrLose1.out === 1 - isWinTmp;
    // either isLoss or isDraw should be 1
    component checkLossDrawEqual1 = ForceEqualIfEnabled();
    checkLossDrawEqual1.in[0] <== isLoss + isDraw;
    checkLossDrawEqual1.in[1] <== 1;
    checkLossDrawEqual1.enabled <== isLoss + isDraw;


    /*  rock = 0, paper = 1, scissors = 2
        0 = 2nd player loses, 1 = draw, 2 = 2nd player wins
          0 0 = 1
          0 1 = 2
          0 2 = 0
          1 0 = 0
          1 1 = 1
          1 2 = 2
          2 0 = 2
          2 1 = 0
          2 2 = 1
    */

    component caseDraw = ForceEqualIfEnabled();
    caseDraw.in[0] <== playerOne.choice;
    caseDraw.in[1] <== playerTwo.choice;
    caseDraw.enabled <== isDraw;

    component caseWin1 = game_logic();
    caseWin1.choice <== [playerOne.choice, playerTwo.choice];
    caseWin1.isWin <== isWin[0];
    caseWin1.refChoice <== [0, 2];

    component caseWin2 = game_logic();
    caseWin2.choice <== [playerOne.choice, playerTwo.choice];
    caseWin2.isWin <== isWin[1];
    caseWin2.refChoice <== [1, 0];

    component caseWin3 = game_logic();
    caseWin3.choice <== [playerOne.choice, playerTwo.choice];
    caseWin3.isWin <== isWin[2];
    caseWin3.refChoice <== [2, 1];
    
    // check utxos for case draw
    // the locked amounts should go back to each player
    // we just need to check for player 2 because player 1 executes the tx
    drawPlayerTwo.check();
    winPlayerTwo.check();
}

template game_logic() {
  signal input choice[2];
  signal input isWin;
  signal input refChoice[2];
  component caseWin1A = ForceEqualIfEnabled();
  caseWin1A.in[0] <== choice[0];
  caseWin1A.in[1] <== refChoice[0];
  caseWin1A.enabled <== isWin;

  component caseWin1B = ForceEqualIfEnabled();
  caseWin1B.in[0] <== choice[1];
  caseWin1B.in[1] <== refChoice[1];
  caseWin1B.enabled <== isWin;
}
