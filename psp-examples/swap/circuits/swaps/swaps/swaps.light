pragma circom 2.1.4;

include "poseidon.circom";
include "merkleProof.circom";
include "keypair.circom";
include "gates.circom";
include "comparators.circom";

// will create a new instance of the circuit
#[instance]
{
    name: swaps,
}

utxoType SwapUtxo {
    priceSol,
    priceSpl,
    splAsset,
    recipient,
    recipientEncryptionPublicKey,
}

inUtxo offerUtxo {
  type: SwapUtxo,
}

outUtxo offerRewardUtxo {
  type: native,
  enabled: takeOfferInstruction,
  checks: {
    amountSol == offerUtxo.priceSol,
    amountSpl == offerUtxo.priceSpl,
    assetSpl == offerUtxo.splAsset,
    publicKey == offerUtxo.recipient,
    blinding == offerUtxo.blinding,
  },
}

// in case someone makes a counter offer and maker accepts it
inUtxo counterOfferUtxo {
  type: SwapUtxo,
  enabled: takeCounterOfferInstruction,
}

outUtxo counterOfferRewardUtxo {
  type: native,
  enabled: takeCounterOfferInstruction,
  checks: {
    amountSol == counterOfferUtxo.priceSol,
    amountSpl == counterOfferUtxo.priceSpl,
    assetSpl == counterOfferUtxo.splAsset,
    publicKey == counterOfferUtxo.recipient,
    blinding ==  counterOfferUtxo.blinding,
  },
}

inUtxo cancelSignerUtxo {
  type: native,
  enabled: cancelInstruction,
  checks: {
    publicKey == offerUtxo.recipient,
  },
}

// TODO: add partial fill, requires encryption of amount to maker, and config of min fill amount
// TODO: add expiry slot

// TODO: add instruction primitive which checks that only one instruction is 1 all others are zero
#[entrypoint]
template swaps() {
  signal input takeOfferInstruction;
  utxo offerUtxo;
  offerUtxo.check();

  utxo offerRewardUtxo;
  offerRewardUtxo.check();

  signal input takeCounterOfferInstruction;

  utxo counterOfferUtxo;
  counterOfferUtxo.check();
  
  utxo counterOfferRewardUtxo;
  counterOfferRewardUtxo.check();

  signal input cancelInstruction;

  utxo cancelSignerUtxo;
  cancelSignerUtxo.check();

  // all instructions are 0 or 1
  var instructionIsSet = 0;
  (1 - takeOfferInstruction) * takeOfferInstruction === 0;
  instructionIsSet += takeOfferInstruction;
  (1 - takeCounterOfferInstruction) * takeCounterOfferInstruction === 0;
  instructionIsSet += takeCounterOfferInstruction;
  (1 - cancelInstruction) * cancelInstruction === 0;
  instructionIsSet += cancelInstruction;
  // exactly one instruction is 1
  instructionIsSet === 1;
}