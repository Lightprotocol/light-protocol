pragma circom 2.1.4;
// templates from other files can be imported by path or linking the file with light psp:build -l <file-name>
// The following imports are automatically linked
include "poseidon.circom";
include "merkleProof.circom";
include "keypair.circom";
include "gates.circom";
include "comparators.circom";

// will create a new instance of the circuit
#[instance]
{
    name: {{circom-name}},
    publicInputs: [publicZ],
}

utxoType inputUtxoType {
    x,
    y,
}
// Defines the data which is saved in the utxo
// utxoData variables need to be lowerCamelCase
inUtxo inputUtxo {
    type: inputUtxoType,
}

#[entrypoint]
template {{circom-name}}() {

    signal input publicZ;
    // instantiates and checks the utxo
    utxo inputUtxo;
    inputUtxo.check();
    publicZ === inputUtxo.x + inputUtxo.y;
}

/*
* Environment Constants:
*   levels = 18
*   nIns = 4 (number of in utxos)
*   nOuts = 4 (number of out utxos)
*   feeAsset = TruncatedSha256(0)
*   indexFeeAsset = 0
*   indexPublicAsset = 1
*   nAssets = 3
*   nInAssets = 2
*   nOutAssets = 2
* Environment variables:
*   txIntegrityHash;
*   transactionVersion;
*   publicAppVerifier;
*   transactionHash;
*   instructionHasher.out;
*   isAppInUtxo[nAppUtxos][nIns];
*
*  InUtxos:
*   inAmount[nIns][nInAssets];
*   inPublicKey[nIns];
*   inBlinding[nIns];
*   inAppDataHash[nIns];
*   inPoolType[nIns];
*   inVerifierPubkey[nIns];
*   inIndices[nIns][nInAssets][nAssets];
* OutUtxos:
*   outputCommitment[nOuts];
*   outAmount[nOuts][nOutAssets];
*   outPubkey[nOuts];
*   outBlinding[nOuts];
*   outAppDataHash[nOuts];
*   outIndices[nOuts][nOutAssets][nAssets];
*   outPoolType[nOuts];
*   outVerifierPubkey[nOuts];
*/
