/*
 * photon-indexer
 *
 * Solana indexer for general compression
 *
 * The version of the OpenAPI document: 0.50.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetQueueElementsResponseValue {
    /// A 32-byte hash represented as a base58 string.
    #[serde(rename = "account_hash")]
    pub account_hash: String,
    /// A 32-byte hash represented as a base58 string.
    #[serde(rename = "leaf")]
    pub leaf: String,
    #[serde(rename = "leaf_index")]
    pub leaf_index: u64,
    /// A 32-byte hash represented as a base58 string.
    #[serde(rename = "merkle_tree")]
    pub merkle_tree: String,
    #[serde(rename = "proof")]
    pub proof: Vec<String>,
    /// A 32-byte hash represented as a base58 string.
    #[serde(rename = "root")]
    pub root: String,
    #[serde(rename = "root_seq")]
    pub root_seq: u64,
    /// A 32-byte hash represented as a base58 string.
    #[serde(rename = "tx_hash", skip_serializing_if = "Option::is_none")]
    pub tx_hash: Option<String>,
}

impl GetQueueElementsResponseValue {
    pub fn new(
        account_hash: String,
        leaf: String,
        leaf_index: u64,
        merkle_tree: String,
        proof: Vec<String>,
        root: String,
        root_seq: u64,
    ) -> GetQueueElementsResponseValue {
        GetQueueElementsResponseValue {
            account_hash,
            leaf,
            leaf_index,
            merkle_tree,
            proof,
            root,
            root_seq,
            tx_hash: None,
        }
    }
}
