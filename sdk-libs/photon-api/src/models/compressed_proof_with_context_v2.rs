/*
 * photon-indexer
 *
 * Solana indexer for general compression
 *
 * The version of the OpenAPI document: 0.50.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompressedProofWithContextV2 {
    #[serde(rename = "compressedProof", skip_serializing_if = "Option::is_none")]
    pub compressed_proof: Option<Box<models::CompressedProof>>,
    #[serde(rename = "leafIndices")]
    pub leaf_indices: Vec<u32>,
    #[serde(rename = "leaves")]
    pub leaves: Vec<String>,
    #[serde(rename = "merkleContexts")]
    pub merkle_context: Vec<models::MerkleContextV2>,
    #[serde(rename = "rootIndices")]
    pub root_indices: Vec<models::RootIndex>,
    #[serde(rename = "roots")]
    pub roots: Vec<String>,
}

impl CompressedProofWithContextV2 {
    pub fn new(
        leaf_indices: Vec<u32>,
        leaves: Vec<String>,
        merkle_context: Vec<models::MerkleContextV2>,
        root_indices: Vec<models::RootIndex>,
        roots: Vec<String>,
    ) -> CompressedProofWithContextV2 {
        CompressedProofWithContextV2 {
            compressed_proof: None,
            leaf_indices,
            leaves,
            merkle_context,
            root_indices,
            roots,
        }
    }
}
