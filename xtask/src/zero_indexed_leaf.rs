use std::{fs::File, io::prelude::*, mem, path::PathBuf};

use clap::Parser;
use light_hasher::{Hasher, Keccak, Poseidon, Sha256};
use light_utils::rustfmt;
use quote::quote;

use crate::Hash;

#[derive(Debug, Parser)]
pub struct Options {
    #[clap(value_enum, long, default_value_t = Hash::Sha256)]
    hash: Hash,
    #[clap(long)]
    path: Option<PathBuf>,
}

pub fn generate_zero_indexed_leaf(opts: Options) -> anyhow::Result<()> {
    match opts.hash {
        Hash::Keccak => generate_zero_indexed_leaf_for_hasher::<Keccak>(opts),
        Hash::Poseidon => generate_zero_indexed_leaf_for_hasher::<Poseidon>(opts),
        Hash::Sha256 => generate_zero_indexed_leaf_for_hasher::<Sha256>(opts),
    }
}

fn generate_zero_indexed_leaf_for_hasher<H>(opts: Options) -> anyhow::Result<()>
where
    H: Hasher,
{
    let zero_indexed_leaf =
        H::hashv(&[&[0u8; 32], &[0u8; mem::size_of::<usize>()], &[0u8; 32]]).unwrap();

    let code = quote! {
        pub const ZERO_INDEXED_LEAF: [u8; 32] = [ #(#zero_indexed_leaf),* ];
    };

    println!(
        "Zero indexded leaf (generated with {:?} hash): {:?}",
        opts.hash, zero_indexed_leaf
    );

    if let Some(path) = opts.path {
        let mut file = File::create(&path)?;
        file.write_all(b"// This file is generated by xtask. Do not edit it manually.\n\n")?;
        file.write_all(&rustfmt(code.to_string())?)?;
        println!("First low leaf written to {:?}", path);
    }

    Ok(())
}
