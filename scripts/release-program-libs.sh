#!/usr/bin/env bash
set -euo pipefail

# Bump versions for program-libs crates and create PR
# Usage: ./scripts/release-program-libs.sh
#
# Automatically detects the appropriate version bump level for each crate
# based on conventional commits since the last release

PROGRAM_LIBS=(
    "light-account-checks"
    "aligned-sized"
    "light-batched-merkle-tree"
    "light-bloom-filter"
    "light-compressed-account"
    "light-concurrent-merkle-tree"
    "light-hash-set"
    "light-hasher"
    "light-heap"
    "light-indexed-array"
    "light-indexed-merkle-tree"
    "light-macros"
    "light-merkle-tree-metadata"
    "light-verifier"
    "light-zero-copy-derive"
    "light-zero-copy"
)

echo "Analyzing changes for program-libs crates..."
echo ""

# Get change recommendations from cargo-release
CHANGES_OUTPUT=$(cargo release changes 2>&1 || true)

# Parse recommendations for each crate
CRATES_TO_RELEASE=()
BUMP_LEVELS=()

for pkg in "${PROGRAM_LIBS[@]}"; do
    RECOMMENDATION=$(echo "$CHANGES_OUTPUT" | grep "cargo release version -p $pkg" | sed -n "s/.*-p $pkg \([^ ]*\).*/\1/p" || echo "")

    if [[ -z "$RECOMMENDATION" || "$RECOMMENDATION" == "<LEVEL|VERSION>" ]]; then
        echo "$pkg: skipped (no changes)"
    else
        CRATES_TO_RELEASE+=("$pkg")
        BUMP_LEVELS+=("$RECOMMENDATION")
        echo "$pkg: $RECOMMENDATION"
    fi
done

echo ""

if [ ${#CRATES_TO_RELEASE[@]} -eq 0 ]; then
    echo "No program-libs crates have changes. Nothing to release."
    exit 0
fi

echo "========================================="
echo "Program Libs Release Plan:"
echo "========================================="
for i in "${!CRATES_TO_RELEASE[@]}"; do
    echo "  ${CRATES_TO_RELEASE[$i]}: ${BUMP_LEVELS[$i]}"
done
echo "========================================="
echo ""
read -p "Proceed with these version bumps? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Release cancelled."
    exit 1
fi

# Create release branch
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BRANCH_NAME="release/program-libs-${TIMESTAMP}"

echo ""
echo "Creating release branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

echo ""
echo "Bumping versions..."
echo ""

# Bump each crate individually with its detected level
for i in "${!CRATES_TO_RELEASE[@]}"; do
    pkg="${CRATES_TO_RELEASE[$i]}"
    level="${BUMP_LEVELS[$i]}"
    echo "Bumping $pkg: $level"
    cargo release version "$level" -p "$pkg" --execute --no-confirm
done

echo ""
echo "Versions bumped successfully!"
echo ""

# Commit changes
git add -A
git commit -m "chore(program-libs): bump versions"

# Push branch
echo "Pushing branch to origin..."
git push -u origin "$BRANCH_NAME"

# Create PR body
PR_BODY="## Program Libs Release

This PR bumps versions for program-libs crates based on conventional commits.

**Version bumps:**
"

for i in "${!CRATES_TO_RELEASE[@]}"; do
    PR_BODY="${PR_BODY}- ${CRATES_TO_RELEASE[$i]}: ${BUMP_LEVELS[$i]}
"
done

PR_BODY="${PR_BODY}
### Release Process
1. Versions bumped in Cargo.toml files
2. PR validation (dry-run) will run automatically
3. After merge, GitHub Action will publish each crate individually to crates.io and create releases

---
*Generated by \`scripts/release-program-libs.sh\`*"

echo ""
echo "Creating pull request..."
gh pr create \
  --title "chore(program-libs): Bump versions" \
  --body "$PR_BODY" \
  --label "release"

echo ""
echo "Pull request created!"
echo ""
echo "Next steps:"
echo "1. Wait for PR checks to pass (dry-run validation)"
echo "2. Review and merge the PR"
echo "3. GitHub Action will automatically publish to crates.io and create releases"
