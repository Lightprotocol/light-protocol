#!/usr/bin/env bash
set -euo pipefail

# Bump versions for all sdk-libs crates and create PR
# Usage: ./scripts/release-sdk-libs.sh [patch|minor|major]
#
# This script:
# 1. Bumps versions in Cargo.toml files
# 2. Creates a branch and commits changes
# 3. Pushes branch and creates PR
# 4. PR triggers GitHub Actions for validation and actual release

SDK_LIBS=(
    "light-sdk-macros"
    "light-sdk-types"
    "light-sdk-pinocchio"
    "light-sdk"
    "light-client"
    "photon-api"
    "light-program-test"
)

# Parse arguments
BUMP_LEVEL="${1:-patch}"

# Validate bump level
if [[ "$BUMP_LEVEL" != "patch" && "$BUMP_LEVEL" != "minor" && "$BUMP_LEVEL" != "major" ]]; then
    echo "Error: Invalid bump level '$BUMP_LEVEL'"
    echo "Usage: $0 [patch|minor|major]"
    exit 1
fi

# Build the package arguments
PACKAGE_ARGS=""
for pkg in "${SDK_LIBS[@]}"; do
    PACKAGE_ARGS="$PACKAGE_ARGS -p $pkg"
done

# Create release branch
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BRANCH_NAME="release/sdk-libs-${BUMP_LEVEL}-${TIMESTAMP}"

echo "Creating release branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

echo ""
echo "Bumping versions for ${#SDK_LIBS[@]} sdk-libs crates ($BUMP_LEVEL)..."
echo "cargo-release will automatically handle dependency ordering and workspace dependencies"
echo ""

# Run cargo-release to bump versions only (no publish, no tag, no push)
cargo release version $BUMP_LEVEL $PACKAGE_ARGS --execute --no-confirm

echo ""
echo "✓ Versions bumped successfully!"
echo ""

# Commit changes
git add -A
git commit -m "chore(sdk-libs): bump versions ($BUMP_LEVEL)"

# Push branch
echo "Pushing branch to origin..."
git push -u origin "$BRANCH_NAME"

# Create PR
echo ""
echo "Creating pull request..."
gh pr create \
  --title "chore(sdk-libs): Release $BUMP_LEVEL version bump" \
  --body "## SDK Libs Release

This PR bumps versions for all sdk-libs crates.

**Bump level:** \`$BUMP_LEVEL\`

**Crates included:**
$(printf '- %s\n' "${SDK_LIBS[@]}")

### Release Process
1. ✅ Versions bumped in Cargo.toml files
2. ⏳ PR validation (dry-run) will run automatically
3. ⏳ After merge, GitHub Action will publish to crates.io and create releases

---
*Generated by \`scripts/release-sdk-libs.sh\`*" \
  --label "release"

echo ""
echo "✓ Pull request created!"
echo ""
echo "Next steps:"
echo "1. Wait for PR checks to pass (dry-run validation)"
echo "2. Review and merge the PR"
echo "3. GitHub Action will automatically publish to crates.io and create releases"
