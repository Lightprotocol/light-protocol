#!/usr/bin/env bash
set -euo pipefail

# Create release PR with current changes
# Usage: ./scripts/create-release-pr.sh <program-libs|sdk-libs>

if [ $# -ne 1 ]; then
    echo "Usage: $0 <program-libs|sdk-libs>"
    exit 1
fi

RELEASE_TYPE=$1

if [[ ! "$RELEASE_TYPE" =~ ^(program-libs|sdk-libs)$ ]]; then
    echo "Error: Release type must be 'program-libs' or 'sdk-libs'"
    exit 1
fi

# Check if there are changes
if git diff --quiet; then
    echo "No changes detected. Please bump versions first."
    exit 1
fi

echo "========================================="
echo "Creating $RELEASE_TYPE release PR"
echo "========================================="
echo ""

# Show what changed
echo "Changed files:"
git diff --name-only | grep Cargo.toml || echo "  (no Cargo.toml changes)"
echo ""

# Extract version changes with package names
VERSION_CHANGES=""
PACKAGES=()

# Get list of changed Cargo.toml files in program-libs, sdk-libs, and program-tests/merkle-tree
for file in $(git diff --name-only -- '**/Cargo.toml' | grep -E '(program-libs|sdk-libs|program-tests/merkle-tree)/'); do
    # Extract old and new version from the diff
    versions=$(git diff "$file" | grep -E '^\+version|^-version' | grep -v '+++\|---')
    old_ver=$(echo "$versions" | grep '^-version' | head -1 | awk -F'"' '{print $2}')
    new_ver=$(echo "$versions" | grep '^\+version' | head -1 | awk -F'"' '{print $2}')

    # Only process if version actually changed
    if [ -n "$old_ver" ] && [ -n "$new_ver" ] && [ "$old_ver" != "$new_ver" ]; then
        # Extract actual package name from Cargo.toml
        pkg_name=$(grep '^name = ' "$file" | head -1 | awk -F'"' '{print $2}')

        if [ -n "$pkg_name" ]; then
            VERSION_CHANGES="${VERSION_CHANGES}  ${pkg_name}: ${old_ver} → ${new_ver}\n"
            PACKAGES+=("$pkg_name")
        fi
    fi
done

VERSION_CHANGES=$(echo -e "$VERSION_CHANGES")

echo "Version changes:"
if [ -z "$VERSION_CHANGES" ]; then
  echo "  (no version changes detected)"
  echo ""
  echo "Error: No version changes found. Please bump versions first."
  exit 1
else
  echo "$VERSION_CHANGES"
fi
echo ""

# Create release branch
BRANCH_NAME="release/${RELEASE_TYPE}"
PR_TITLE="chore: bump ${RELEASE_TYPE} versions"

echo "Will create:"
echo "  Branch: $BRANCH_NAME"
echo "  PR: $PR_TITLE"
echo ""
read -p "Create release branch and PR with these changes? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Cancelled."
    exit 1
fi

echo ""
echo "========================================="
echo "Running cargo release dry-run validation..."
echo "========================================="
echo ""

# Build package args for workspace publish command (using detected packages from version changes)
PACKAGE_ARGS=""
for pkg in "${PACKAGES[@]}"; do
    PACKAGE_ARGS="$PACKAGE_ARGS -p $pkg"
done

echo "Validating packages with cargo publis --dry-run"
ERROR_OUTPUT=$(cargo publish --dry-run --allow-dirty $PACKAGE_ARGS )
if [ $? -ne 0 ]; then
    echo "✗ Validation failed"
    echo ""
    echo "Error output:"
    echo "$ERROR_OUTPUT"
    echo ""

    echo "The GitHub Actions PR validation will run the same checks."
    echo "Continue anyway and let CI validate? (y/N) "
    read -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 1
    fi
else
    echo "✓ All crates validated successfully"
fi
echo ""

echo "Creating release branch..."
git checkout -b "$BRANCH_NAME"

# Commit changes
git add -A
git commit -m "chore(${RELEASE_TYPE}): bump versions"

# Push branch
echo "Pushing branch to origin..."
git push -u origin "$BRANCH_NAME"

# Create PR
echo ""
echo "Creating pull request..."

# Capitalize first letter of release type (bash 3.2 compatible)
RELEASE_TYPE_CAPS="$(echo ${RELEASE_TYPE:0:1} | tr '[:lower:]' '[:upper:]')${RELEASE_TYPE:1}"

# Build PR body with proper escaping
PR_BODY="## ${RELEASE_TYPE_CAPS} Release

This PR bumps versions for ${RELEASE_TYPE} crates.

### Version Bumps

\`\`\`
${VERSION_CHANGES}
\`\`\`

### Release Process
1. Versions bumped in Cargo.toml files
2. PR validation (dry-run) will run automatically
3. After merge, GitHub Action will publish each crate individually to crates.io and create releases

---
*Generated by \`scripts/create-release-pr.sh ${RELEASE_TYPE}\`*"

gh pr create \
  --title "$PR_TITLE" \
  --body "$PR_BODY" \
  --label "release"

echo ""
echo "Pull request created!"
echo ""
echo "Next steps:"
echo "1. Wait for PR checks to pass (dry-run validation)"
echo "2. Review and merge the PR"
echo "3. GitHub Action will automatically publish to crates.io and create releases"
