#!/usr/bin/env bash
set -euo pipefail

# Create release PR with current changes
# Usage: ./scripts/create-release-pr.sh <program-libs|sdk-libs>

if [ $# -ne 1 ]; then
    echo "Usage: $0 <program-libs|sdk-libs>"
    exit 1
fi

RELEASE_TYPE=$1

if [[ ! "$RELEASE_TYPE" =~ ^(program-libs|sdk-libs)$ ]]; then
    echo "Error: Release type must be 'program-libs' or 'sdk-libs'"
    exit 1
fi

# Check if there are changes
if git diff --quiet; then
    echo "No changes detected. Please bump versions first."
    exit 1
fi

echo "========================================="
echo "Creating $RELEASE_TYPE release PR"
echo "========================================="
echo ""

# Show what changed
echo "Changed files:"
git diff --name-only | grep Cargo.toml || echo "  (no Cargo.toml changes)"
echo ""

# Extract version changes with crate names
VERSION_CHANGES=$(git diff -- '**/Cargo.toml' | awk '
  /^diff --git/ {
    split($3, parts, "/");
    if (parts[2] == "program-libs" && parts[4] == "Cargo.toml") {
      crate = parts[3];
    } else if (parts[2] == "sdk-libs" && parts[4] == "Cargo.toml") {
      crate = parts[3];
    } else {
      crate = "";
    }
  }
  /^-version = / {
    old_ver = $3;
    gsub(/"/, "", old_ver);
  }
  /^\+version = / {
    new_ver = $3;
    gsub(/"/, "", new_ver);
    if (crate && old_ver && new_ver) {
      printf "  %s: %s → %s\n", crate, old_ver, new_ver;
      crate = "";
      old_ver = "";
      new_ver = "";
    }
  }
')

echo "Version changes:"
if [ -z "$VERSION_CHANGES" ]; then
  echo "  (no version changes detected)"
  echo ""
  echo "Error: No version changes found. Please bump versions first."
  exit 1
else
  echo "$VERSION_CHANGES"
fi
echo ""

# Create release branch
BRANCH_NAME="release/${RELEASE_TYPE}"
PR_TITLE="chore(${RELEASE_TYPE}): Bump versions"

echo "Will create:"
echo "  Branch: $BRANCH_NAME"
echo "  PR: $PR_TITLE"
echo ""
read -p "Create release branch and PR with these changes? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Cancelled."
    exit 1
fi

echo ""
echo "========================================="
echo "Running cargo release dry-run validation..."
echo "========================================="
echo ""

# Determine which packages to validate
if [ "$RELEASE_TYPE" == "program-libs" ]; then
    PACKAGES=(
        "light-account-checks" "aligned-sized" "light-batched-merkle-tree"
        "light-bloom-filter" "light-compressed-account" "light-concurrent-merkle-tree"
        "light-hash-set" "light-hasher" "light-heap" "light-indexed-array"
        "light-indexed-merkle-tree" "light-macros" "light-merkle-tree-metadata"
        "light-merkle-tree-reference" "light-verifier" "light-zero-copy-derive" "light-zero-copy"
    )
else
    PACKAGES=(
        "light-sdk-macros" "light-sdk-types" "light-sdk-pinocchio"
        "light-sdk" "light-client" "photon-api" "light-program-test"
    )
fi

# Build package args for workspace publish command
PACKAGE_ARGS=""
for pkg in "${PACKAGES[@]}"; do
    PACKAGE_ARGS="$PACKAGE_ARGS -p $pkg"
done

echo "Validating packages in correct dependency order..."
ERROR_OUTPUT=$(cargo publish --dry-run --allow-dirty $PACKAGE_ARGS 2>&1)
if [ $? -ne 0 ]; then
    echo "✗ Validation failed"
    echo ""
    echo "Error output:"
    echo "$ERROR_OUTPUT"
    echo ""

    echo "The GitHub Actions PR validation will run the same checks."
    echo "Continue anyway and let CI validate? (y/N) "
    read -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 1
    fi
else
    echo "✓ All crates validated successfully"
fi
echo ""

echo "Creating release branch..."
git checkout -b "$BRANCH_NAME"

# Commit changes
git add -A
git commit -m "chore(${RELEASE_TYPE}): bump versions"

# Push branch
echo "Pushing branch to origin..."
git push -u origin "$BRANCH_NAME"

# Create PR
echo ""
echo "Creating pull request..."

PR_BODY="## ${RELEASE_TYPE^} Release

This PR bumps versions for ${RELEASE_TYPE} crates.

### Version Bumps

\`\`\`
${VERSION_CHANGES}
\`\`\`

### Release Process
1. Versions bumped in Cargo.toml files
2. PR validation (dry-run) will run automatically
3. After merge, GitHub Action will publish each crate individually to crates.io and create releases

---
*Generated by \`scripts/create-release-pr.sh ${RELEASE_TYPE}\`*"

gh pr create \
  --title "$PR_TITLE" \
  --body "$PR_BODY" \
  --label "release"

echo ""
echo "Pull request created!"
echo ""
echo "Next steps:"
echo "1. Wait for PR checks to pass (dry-run validation)"
echo "2. Review and merge the PR"
echo "3. GitHub Action will automatically publish to crates.io and create releases"
