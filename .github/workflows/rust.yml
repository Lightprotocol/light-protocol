on:
  push:
    branches:
      - main
    paths:
      - ".cargo/**"
      - "**/*.rs"
      - "**/Cargo.*"
      - "light-prover/**"
      - ".github/workflows/rust.yml"
  pull_request:
    branches:
      - "*"
    paths:
      - "**/*.rs"
      - "**/Cargo.*"
      - "light-prover/**"
      - ".github/workflows/rust.yml"

    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

name: rust

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup and build
        uses: ./.github/actions/setup-and-build

      - name: Build CLI
        run: |
          source ./scripts/devenv.sh
          npx nx build @lightprotocol/zk-compression-cli

      # concurrent merkle tree crate must run in isolation because otherwise it
      # tries to use the idl-build feature (which fails).
      - name: Test workspace (excluding light-concurrent-merkle-tree)
        env:
          LLVM_PROFILE_FILE: "target/coverage/prof/%p-%m.profraw"
          RUST_MIN_STACK: 8388608
          RUSTFLAGS: "-Cinstrument-coverage -D warnings"
        run: |
          source ./scripts/devenv.sh
          echo "Rust version: $(rustc --version)"
          cargo test --all-targets --workspace \
            --exclude light-concurrent-merkle-tree \
            --exclude photon-api \
            --exclude forester \
            --exclude name-service \
            --exclude mixed-accounts

      - name: Test light-concurrent-merkle-tree
        env:
          LLVM_PROFILE_FILE: "target/coverage/prof/%p-%m.profraw"
          RUST_MIN_STACK: 8388608
          RUSTFLAGS: "-Cinstrument-coverage -D warnings"
        run: |
          source ./scripts/devenv.sh
          echo "Rust version: $(rustc --version)"
          cargo test --all-targets --package light-concurrent-merkle-tree

      - name: Install grcov
        uses: taiki-e/install-action@v2
        with:
          tool: grcov

      - name: Create coverage report
        run: |
         grcov \
           --source-dir . \
           --binary-path target/debug \
           --branch \
           --excl-start 'mod tests \{' \
           --ignore 'tests/*' \
           -t lcov \
           -o lcov.info \
           target/coverage/prof

      - name: Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          verbose: true
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
