name: Setup and build
description: Checkout sources, install dependencies, build and prepare for tests

inputs:
  skip-components:
    description: 'Comma-separated list of components to skip (e.g., "redis,go"). If not specified, all components are installed.'
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Free Disk Space (Ubuntu)
      if: "!contains(inputs.skip-components, 'disk-cleanup')"
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        swap-storage: false
        large-packages: false
        docker-images: false

    - name: Install system dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config build-essential

    - name: Load versions
      id: versions
      shell: bash
      run: |
        source scripts/devenv/versions.sh
        echo "rust=${RUST_VERSION}" >> $GITHUB_OUTPUT
        echo "go=${GO_VERSION}" >> $GITHUB_OUTPUT
        echo "node=${NODE_VERSION}" >> $GITHUB_OUTPUT
        echo "pnpm=${PNPM_VERSION}" >> $GITHUB_OUTPUT
        echo "solana=${SOLANA_VERSION}" >> $GITHUB_OUTPUT
        echo "anchor=${ANCHOR_VERSION}" >> $GITHUB_OUTPUT
        echo "photon=${PHOTON_VERSION}" >> $GITHUB_OUTPUT
        echo "photon_commit=${PHOTON_COMMIT}" >> $GITHUB_OUTPUT
        echo "redis=${REDIS_VERSION}" >> $GITHUB_OUTPUT

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ steps.versions.outputs.rust }}
        components: rustfmt, clippy
        cache-workspaces: |
          . -> target
          cli -> cli/target

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ steps.versions.outputs.go }}
        cache-dependency-path: prover/server/go.sum

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.versions.outputs.node }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ steps.versions.outputs.pnpm }}
        run_install: false

    - name: Cache Solana CLI
      id: cache-solana
      uses: actions/cache@v4
      with:
        path: |
          .local/bin/solana*
          .local/bin/agave*
          .local/bin/cargo-*
          .local/bin/platform-tools-sdk
        key: ${{ runner.os }}-solana-${{ steps.versions.outputs.solana }}

    - name: Install Solana CLI
      if: steps.cache-solana.outputs.cache-hit != 'true'
      shell: bash
      run: bash scripts/devenv/install-solana.sh

    - name: Cache Anchor CLI
      id: cache-anchor
      uses: actions/cache@v4
      with:
        path: |
          .local/cargo/bin/avm
          .local/cargo/bin/anchor
        key: ${{ runner.os }}-anchor-${{ steps.versions.outputs.anchor }}

    - name: Install Anchor CLI
      if: steps.cache-anchor.outputs.cache-hit != 'true'
      shell: bash
      run: bash scripts/devenv/install-anchor.sh

    - name: Cache Photon indexer
      id: cache-photon
      uses: actions/cache@v4
      with:
        path: .local/cargo/bin/photon
        key: ${{ runner.os }}-photon-${{ steps.versions.outputs.photon }}-${{ steps.versions.outputs.photon_commit }}

    - name: Install Photon indexer
      if: steps.cache-photon.outputs.cache-hit != 'true'
      shell: bash
      run: bash scripts/devenv/install-photon.sh

    - name: Cache Redis
      if: "!contains(inputs.skip-components, 'redis')"
      id: cache-redis
      uses: actions/cache@v4
      with:
        path: |
          .local/bin/redis-*
          .local/etc/redis.conf
        key: ${{ runner.os }}-redis-${{ steps.versions.outputs.redis }}

    - name: Install Redis
      if: "!contains(inputs.skip-components, 'redis') && steps.cache-redis.outputs.cache-hit != 'true'"
      shell: bash
      run: bash scripts/devenv/install-redis.sh

    - name: Cache proving keys
      if: "!contains(inputs.skip-components, 'proving-keys')"
      id: cache-keys
      uses: actions/cache@v4
      with:
        path: prover/server/proving-keys
        key: ${{ runner.os }}-proving-keys-${{ hashFiles('prover/server/scripts/download_keys.sh') }}

    - name: Download proving keys
      if: "!contains(inputs.skip-components, 'proving-keys') && steps.cache-keys.outputs.cache-hit != 'true'"
      shell: bash
      run: bash scripts/devenv/download-gnark-keys.sh

    - name: Set Light Protocol environment variables
      shell: bash
      run: |
        # Add .local/bin to PATH for Solana, Anchor, Photon, Redis
        echo "${PWD}/.local/bin" >> $GITHUB_PATH
        echo "${PWD}/.local/cargo/bin" >> $GITHUB_PATH

        # Light Protocol-specific environment variables
        # (Official actions handle Rust, Go, Node.js environment setup)
        echo "CARGO_FEATURES=v2_ix" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "SBF_OUT_DIR=target/deploy" >> $GITHUB_ENV

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        # Get the store path before any pnpm operations
        STORE_PATH=$(pnpm store path --silent)
        echo "STORE_PATH=${STORE_PATH}" >> $GITHUB_ENV
        echo "path=${STORE_PATH}" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      id: pnpm-cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      shell: bash
      run: |
        # Install dependencies with frozen lockfile for consistency
        pnpm install --frozen-lockfile

        # Validate node_modules was created
        if [ ! -d "node_modules" ] || [ -z "$(ls -A node_modules 2>/dev/null)" ]; then
          echo "Error: node_modules not created after pnpm install"
          exit 1
        fi

    - name: Save pnpm cache
      # Save cache even on failure to speed up retries
      if: steps.pnpm-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

    - name: Generate Solana keypair
      shell: bash
      run: |
        mkdir -p /home/runner/.config/solana/
        if [ ! -f /home/runner/.config/solana/id.json ]; then
          solana-keygen new --no-bip39-passphrase -o /home/runner/.config/solana/id.json
        fi

    - name: Copy spl_noop.so to target/deploy
      shell: bash
      run: |
        mkdir -p ./target/deploy
        cp ./third-party/solana-program-library/spl_noop.so ./target/deploy/spl_noop.so

    - name: Cache Solana programs
      id: cache-programs
      uses: actions/cache@v4
      with:
        path: |
          target/deploy/*.so
          target/idl
          target/types
        key: ${{ runner.os }}-programs-${{ hashFiles('programs/**/Cargo.toml', 'programs/**/Cargo.lock', 'programs/**/*.rs', 'program-libs/**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-programs-

    - name: Cache Solana program-tests
      id: cache-program-tests
      uses: actions/cache@v4
      with:
        path: |
          target/deploy/create_address_test_program.so
          target/deploy/sdk_anchor_test.so
        key: ${{ runner.os }}-program-tests-${{ hashFiles('program-tests/**/Cargo.toml', 'program-tests/**/Cargo.lock', 'program-tests/**/*.rs', 'test-programs/**/Cargo.toml', 'test-programs/**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-program-tests-

    - name: Build Rust programs
      if: steps.cache-programs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Building Rust programs..."
        if ! npx nx build @lightprotocol/programs; then
          echo "Failed to build programs, retrying with verbose output..."
          npx nx build @lightprotocol/programs --verbose
        fi

    - name: Build Rust program-tests
      if: steps.cache-program-tests.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Building Rust program-tests..."
        if ! npx nx build @lightprotocol/program-tests; then
          echo "Failed to build program-tests, retrying with verbose output..."
          npx nx build @lightprotocol/program-tests --verbose
        fi

    - name: Check for git changes
      shell: bash
      run: |
        # Check for unstaged changes
        if ! git diff --quiet; then
          echo "There are unstaged changes after build!"
          git diff
          exit 1
        fi

        # Check for uncommitted changes
        if ! git diff --staged --quiet; then
          echo "There are uncommitted changes after build!"
          exit 1
        fi

        echo "No changes detected."
